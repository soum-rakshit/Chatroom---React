/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/x0W8MFdtFPs
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useRef, useEffect } from "react"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

export function chatComponent() {
  const [messages, setMessages] = useState([
    {
      id: 1,
      user: {
        name: "John Doe",
        avatar: "/placeholder-user.jpg",
      },
      content: "Hey, how is it going?",
      timestamp: "2023-07-05T12:34:56Z",
      isSender: false,
    },
    {
      id: 2,
      user: {
        name: "Jane Smith",
        avatar: "/placeholder-user.jpg",
      },
      content: "Great, thanks for asking!",
      timestamp: "2023-07-05T12:35:01Z",
      isSender: false,
    },
    {
      id: 3,
      user: {
        name: "Bob Johnson",
        avatar: "/placeholder-user.jpg",
      },
      content: "Doing well, how about you?",
      timestamp: "2023-07-05T12:35:10Z",
      isSender: false,
    },
  ])
  const [newMessage, setNewMessage] = useState("")
  const messagesEndRef = useRef(null)
  const handleSendMessage = () => {
    if (newMessage.trim() !== "") {
      const newMessageObj = {
        id: messages.length + 1,
        user: {
          name: "You",
          avatar: "/placeholder-user.jpg",
        },
        content: newMessage,
        timestamp: new Date().toISOString(),
        isSender: true,
      }
      setMessages([...messages, newMessageObj])
      setNewMessage("")
      scrollToBottom()
    }
  }
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }
  useEffect(() => {
    scrollToBottom()
  }, [messages])
  return (
    (<div className="flex flex-col h-screen">
      <header
        className="bg-primary text-primary-foreground py-4 px-6 flex items-center justify-between">
        <h1 className="text-xl font-bold">Chat Room</h1>
        <div className="flex items-center gap-4">
          <Avatar>
            <AvatarImage src="/placeholder-user.jpg" />
            <AvatarFallback>YA</AvatarFallback>
          </Avatar>
          <Button variant="ghost" size="icon">
            <MoveHorizontalIcon className="w-5 h-5" />
          </Button>
        </div>
      </header>
      <div className="flex-1 overflow-auto p-4 bg-background">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex items-start gap-4 ${message.isSender ? "justify-end" : "justify-start"}`}>
              <div
                className={`max-w-[60%] rounded-lg p-3 ${
                  message.isSender ? "bg-primary text-primary-foreground" : "bg-secondary text-secondary-foreground"
                }`}>
                <div className="font-medium">{message.user.name}</div>
                <div className="text-sm">{message.content}</div>
                <div className="text-xs text-muted-foreground">{new Date(message.timestamp).toLocaleString()}</div>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
      </div>
      <div className="bg-background border-t py-4 px-6">
        <div className="relative">
          <Textarea
            placeholder="Type your message..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") {
                handleSendMessage()
              }
            }}
            className="pr-16 rounded-lg" />
          <Button
            type="button"
            onClick={handleSendMessage}
            className="absolute top-1/2 right-4 -translate-y-1/2">
            <SendIcon className="w-5 h-5" />
          </Button>
        </div>
      </div>
    </div>)
  );
}

function MoveHorizontalIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polyline points="18 8 22 12 18 16" />
      <polyline points="6 8 2 12 6 16" />
      <line x1="2" x2="22" y1="12" y2="12" />
    </svg>)
  );
}


function SendIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>)
  );
}
